#lang plai
; Type definition for abstract syntax tree of LFAE
(define-type LFAE
    [num    (n number?)]
    [add     (lhs LFAE?) (rhs LFAE?)]
    [sub     (lhs LFAE?) (rhs LFAE?)]
    [mul     (lhs LFAE?) (rhs LFAE?)]
    [id      (name symbol?)]
    [fun     (param symbol?) (body LFAE?)]
    [app     (ftn LFAE?) (arg LFAE?)]
    [iff     (cond LFAE?) (t LFAE?) (f LFAE?)]
    [eql     (lhs LFAE?) (rhs LFAE?)]
    [orr     (lhs LFAE?) (rhs LFAE?)]
     )

; [contract] parse: sexp -> LFAE
; [purpose]: to convert sexp to LFAE
; [test cases]: (test (parse '{100 0}) ((num 100) (num 0))
;               (test (parse '{{fun {x} {+ x x}} 1}) (app (fun 'x (add (id 'x) (id 'x))) (num 1)))
(define (parse sexp)
   (match sexp
        [(? number?)                (num sexp)]
        [(list '+ l r)              (add (parse l) (parse r))]
        [(list '- l r)              (sub (parse l) (parse r))]
        [(list '* l r)              (mul (parse l) (parse r))]
        [(list 'with (list i v) e)  (app (fun i (parse e)) (parse v))] ;check if value in v is same as i
        [(? symbol?)                (id sexp)]
        [(list 'fun (list p) b)                 (fun p (parse b))]
        [(list f a)                 (app (parse f) (parse a))]
        [(list '= l r)              (eql (parse l) (parse r))] 
        [(list 'if l t r)           (iff (parse l) (parse t) (parse r))]
        [(list 'or l r)             (orr (parse l) (parse r))]
        [else                       (error 'parse "bad syntax: ~a" sexp)]))

;(test (parse '{100 0}) (app (num 100) (num 0)))
;(test (parse '{{fun {x} {+ x x}} 1}) (app (fun 'x (add (id 'x) (id 'x))) (num 1)))

; [contract] isRecurssion expr -> bool
; [purpose]: to see if the inputed code block contains recurssion
(define (isRecursion expr)
  (match expr
    [(list 'with (list i v) e)  (if (eq? i (findId i v)) true false)] ;check if value in v is same as i
    [else                       false]))

; [contract] findId i v -> LFAE
; [purpose]: to see if the inputed code block contains recurssion anywhere in the code block
(define (findId i v)
  (match v
      [(list 'fun (list p) b)     (findId i b)]
      [(? number?)                empty]
      [(list '+ l r)              (if (eq? (findId i l) i) (findId i l) (if(eq? (findId i r) i) (findId i r) empty))]
      [(list '- l r)              (if (eq? (findId i l) i) (findId i l) (if(eq? (findId i r) i) (findId i r) empty))]
      [(list '* l r)              (if (eq? (findId i l) i) (findId i l) (if(eq? (findId i r) i) (findId i r) empty))]
      [(? symbol?)                v]
      [(list f a)                 (findId i f)]
      [(list 'if l t r)           (if
                                   (eq? (findId i t) i) (findId i t)
                                   (if
                                    (eq? (findId i r) i) (findId i r) empty))]
      [else                       empty]))

; [contract] desugar expr -> expr
; [purpose]: to convert recursive code into a value to be inputed into the parser
(define (desugar expr)
  (match expr
    [(list 'with (list i
                       (list 'fun (list p)
                             (list 'if l t r)))
           (list f a))
     {list 'with {list 'mk-rec {list 'fun{list 'body-proc}
                                 {list 'with {list 'facX {list 'fun{list 'facY}
                                             {list 'with {list 'f {list 'fun{list 'x}
                                                                       {list {list 'facY 'facY} 'x}}}
                                                   {list 'body-proc 'f}}}}
                                           {list 'facX 'facX}}}}
           {list 'with {list i {list 'mk-rec
                     {list 'fun {list i}
                        {list 'fun {list p} {list 'if l t r}}}}}
     {list i a}}}]
    [else           error 'desugar "bad syntax: ~a" expr]))

; Type definition for deferred substitution
(define-type DefrdSub
  [mtSub]
  [aSub (name symbol?) (value LFAE-Value?) (ds DefrdSub?)])

; Type Defintion for LFAE-Value
(define-type LFAE-Value
  [numV       (n number?)]
  [closureV   (param symbol?) (body LFAE?) (ds DefrdSub?)]
  [exprV      (expr LFAE?) (ds DefrdSub?)
                            (value (box/c (or/c false LFAE-Value?)))]) ; the thrid field is for cache for the value of expression after one-time evaluation.


; [contract] strict: LFAE-Value -> LFAE-Value
; [purpose]: to interpret exprV expression to get a value in strictness points.               
(define (strict v)
    (type-case LFAE-Value v
        [exprV (expr ds v-box)
                     (if (not (unbox v-box))
                          (local [(define v (strict (interp expr ds)))]
                              (begin (set-box! v-box v)
                                           v))
                          (unbox v-box))] 
        [else v]))

; [contract] num-op: operators for artithmatic computation -> function for artithmatic computation
; [purpose]: to get a function for arithmatic computation.    
(define (num-op op)
     (lambda (x y)
          (numV (op (numV-n x) (numV-n y)))))

(define num+ (num-op +))
(define num- (num-op -))
(define num* (num-op *))

; [contract] lookup: symbol DefrdSub -> FAE-Value
; [purpose]: to get a value for the given identifier (symbol)
(define (lookup name ds)
  (type-case DefrdSub ds
    [mtSub ()           (error 'lookup "free identifier")] 
    [aSub  (i v saved) (if(symbol=? i name)
                                (strict v)             ;; if v is exprV (num ==> interp it
                                (lookup name saved))]))

; [contract] interp: LFAE DefrdSub -> LFAE-Value
; [purpose]: to get LFAE-Value from LFAE
; [test cases]:(test(interp(parse '{+ 5 6}) {mtSub}) (numV 11))
;              (test(interp (parse '{{fun {x} {+ x x}} 1}) {mtSub}) (numV 2))
(define (interp lfae ds)
  (type-case LFAE lfae
     [num (n)      (numV n)]
     [add (l r)    (num+ (interp l ds) (interp r ds))]
     [sub (l r)    (num- (interp l ds) (interp r ds))]
     [mul (l r)    (num* (interp l ds) (interp r ds))]
     [id  (s)     (lookup s ds)]
     [fun (p b)  (closureV p b ds)]
     [iff (l t r) (if (interp l ds) (interp t ds) (interp r ds))]
     [eql (l r)   (equal? (interp l ds) (interp r ds))]
     [orr (l r)   (or (interp l ds) (interp r ds))]
     [app (f a)   (local [(define f-val (strict (interp f ds)))
                          (define a-val (exprV a ds (box #f)))]
                   (interp (closureV-body f-val)
                           (aSub (closureV-param f-val)
                                 a-val
                                 (closureV-ds f-val))))]))

;(test(interp(parse '{+ 5 6}) {mtSub}) (numV 11))
;(test(interp (parse '{{fun {x} {+ x x}} 1}) {mtSub}) (numV 2))

; [contract] run expr ->  LFAE-Value
; [purpose]: to get the LFAE-Value from an expression
; [test cases]:(test(run '{with {count {fun {n} {if {= n 0} 0 {+ 1 {count {- n 1}}}}}} {count 8}}) (numV 8))
;              (test(run '{with {fac {fun {n} {if {= n 0} 1 {* n {fac {- n 1}}}}}} {fac 10}}) (numV 3628800))
;              (test(run '{with {fib {fun {n} {if {or {= n 0} {= n 1}} 1 {+ {fib {- n 1}} {fib {- n 2}}}}}} {fib 10}}) (numV 89))
(define (run sexp)
     (if (equal? (isRecursion sexp) true)
         (interp (parse (desugar sexp)) (mtSub))
         (interp (parse sexp) (mtSub))))


;(test(run '{with {count {fun {n} {if {= n 0} 0 {+ 1 {count {- n 1}}}}}} {count 8}}) (numV 8))
;(test(run '{with {fac {fun {n} {if {= n 0} 1 {* n {fac {- n 1}}}}}} {fac 10}}) (numV 3628800))
;(test(run '{with {fib {fun {n} {if {or {= n 0} {= n 1}} 1 {+ {fib {- n 1}} {fib {- n 2}}}}}} {fib 10}}) (numV 89))




